import discord
from discord.ext import commands
import requests
import sqlite3
from datetime import datetime
import asyncio
import nest_asyncio

# Apply nest_asyncio for Colab
nest_asyncio.apply()

# Bot setup with intents
intents = discord.Intents.default()
intents.message_content = True  # Required for message content
bot = commands.Bot(command_prefix='!', intents=intents)

# Config
# Replace with your token
GEMINI_API_KEY = "AIzaSyC5iXD9ALkALnm_DnQu5yTdGEnMDTZa7x"    # Not used now, but kept for later
GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent"  # Not used now

# Database setup
def setup_db():
    conn = sqlite3.connect("moderation.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS logs
                 (id INTEGER PRIMARY KEY, user_id TEXT, action TEXT, details TEXT, timestamp TEXT)''')
    conn.commit()
    conn.close()

def log_action(action, user_id, details):
    conn = sqlite3.connect("moderation.db")
    c = conn.cursor()
    c.execute("INSERT INTO logs (user_id, action, details, timestamp) VALUES (?, ?, ?, ?)",
              (user_id, action, details, str(datetime.now())))
    conn.commit()
    conn.close()

# Bad-word filter (replacing Gemini API)
BAD_WORDS = ["kill", "hate", "stupid"]  # Add any words you want to block

def check_message_with_gemini(message):
    # Check if any bad word is in the message (case-insensitive)
    for word in BAD_WORDS:
        if word.lower() in message.lower():
            print(f"Found bad word: {word}")  # Debug: Show which word triggered it
            return True  # Flagged
    return False  # Safe

# Bot events
@bot.event
async def on_ready():
    setup_db()
    print(f'Logged in as {bot.user}')

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return

    if check_message_with_gemini(message.content):
        await message.delete()
        await message.channel.send(f"{message.author.mention}, your message was flagged as inappropriate!")
        log_action("flagged", str(message.author.id), message.content)

    await bot.process_commands(message)

# Commands
@bot.command()
async def mute(ctx, member: discord.Member):
    if ctx.author.guild_permissions.administrator:
        await member.edit(mute=True)
        await ctx.send(f"{member.mention} has been muted.")
        log_action("mute", str(member.id), f"Muted by {ctx.author}")
    else:
        await ctx.send("You don’t have permission to do that!")

@bot.command()
async def rules(ctx):
    await ctx.send("Rules: No harassment, no hate speech, be respectful!")

@bot.command()
async def logs(ctx):
    conn = sqlite3.connect("moderation.db")
    c = conn.cursor()
    c.execute("SELECT * FROM logs")
    rows = c.fetchall()
    conn.close()
    if rows:
        log_msg = "\n".join([f"ID: {r[0]}, User: {r[1]}, Action: {r[2]}, Details: {r[3]}, Time: {r[4]}" for r in rows])
        await ctx.send(f"Logs:\n{log_msg}")
    else:
        await ctx.send("No logs yet!")

# Start the bot
async def main():
    try:
        await bot.start(DISCORD_TOKEN)
    except discord.errors.PrivilegedIntentsRequired:
        print("Error: Privileged intents are required but not enabled in the Discord Developer Portal.")
        print("Go to https://discord.com/developers/applications/, enable 'Message Content Intent', and try again.")

# Run in Colab’s event loop
loop = asyncio.get_event_loop()
loop.run_until_complete(main())
